* Clidget Contact Manager Tutorial

I've noticed that both Om and Reagent (formerly Cloact) have recently
published Contacts Manager tutorials, and thought that it'd be a good
idea to provide a Clidget example as a comparison - so here it is!

For an introduction to Clidget and its rationale, please see the [[https://github.com/james-henderson/clidget/][README]].

For a comparison to Om, Reagent and React, including the reasons why I
wrote Clidget in the first place, please see [[https://github.com/james-henderson/clidget/blob/master/comparison.org][here]].

** Getting set up:

I tend to use my 'SPLAT' Lein template for ClojureScript
applications - it's geared to what I usually use in new ClojureScript
applications. Feel free to use this, or whatever template you use -
write your own, even!

#+BEGIN_SRC sh
  lein new splat contacts
#+END_SRC

You'll then need to include Clidget as a dependency in your
=project.clj=, as follows:

#+BEGIN_SRC clojure
  [jarohen/clidget "0.2.0"]
#+END_SRC

To jump all the way to a working example, you can:

#+BEGIN_SRC sh
git clone https://github.com/james-henderson/clidget.git
cd clidget/contacts
lein dev
#+END_SRC

** Parsing/formatting names

The Om tutorial includes a few functions for parsing and formatting
names which I have included verbatim - these are in
[[https://github.com/james-henderson/clidget/blob/master/contacts/src/cljx/contacts/cljx/formatter.cljx][src/cljx/contacts/cljx/formatter.cljx]]. 

While we're here, [[https://github.com/lynaghk/cljx][CLJX]] is a great library for writing code that's
portable between Clojure and ClojureScript; I'd highly recommend it.

The upshot of this is that you can test this code in a Clojure REPL,
and know that it works in ClojureScript - which can be really useful!

** Requires

First, head to [[https://github.com/james-henderson/clidget/blob/master/contacts/src/cljs/contacts/cljs/app.cljs][src/cljs/contacts/cljs/app.cljs]] (if you're using
SPLAT), and require a few dependencies:

#+BEGIN_SRC clojure
  (ns contacts.cljs.app
    (:require [clidget.widget :refer-macros [defwidget]]
              [cljs.core.async :as a]
              [contacts.cljx.formatter :as f]
              [dommy.core :as d]
              [goog.events.KeyCodes :as kc])
    (:require-macros [dommy.macros :refer [node sel1]]
                     [cljs.core.async.macros :refer [go-loop]]))
#+END_SRC

I use [[https://github.com/Prismatic/dommy][Dommy]] for rendering HTML, but Clidget doesn't mind what you
choose - feel free to replace this with your library of choice!

** State of the application

Clidget uses vanilla ClojureScript atoms to maintain state - in this
application, we'll use one atom, =!contacts=; a example value for
which is as follows:

#+BEGIN_SRC clojure
  #{{:first "Ben" :last "Bitdiddle" :email "benb@mit.edu"}
    {:first "Alyssa" :middle-initial "P" :last "Hacker" :email "aphacker@mit.edu"}
    {:first "Eva" :middle "Lu" :last "Ator" :email "eval@mit.edu"}
    {:first "Louis" :last "Reasoner" :email "prolog@mit.edu"}
    {:first "Cy" :middle-initial "D" :last "Effect" :email "bugs@mit.edu"}
    {:first "Lem" :middle-initial "E" :last "Tweakit" :email "morebugs@mit.edu"}}
#+END_SRC

** Rendering the Contact Manager

In Clidget, we split UI's up into composable 'widgets' (which
themselves can contain other widgets). For this
example, I'll use three:

- Rendering a list of contacts
- Rendering an individual contact
- Rendering a 'new contact' text box (this isn't technically a Clidget
  widget, just a DOM element)

*** Rendering a list of contacts

For simplicity, we're going to render a list of contacts as an HTML
=<ul>=.

To define the widget, we use =defwidget=, and write *declaratively*
how a contact list should be rendered.

In the first parameter to =defwidget=, we destructure the system state
to retrieve the current =contacts= *value*. We then return a DOM
element representing the contacts list for this value (mostly, by
delegating to the individual contact widget).

#+BEGIN_SRC clojure
  (defwidget contact-list-widget [{:keys [contacts]} event-ch]
    (node
     [:div
      [:h1 "Contact List:"]
      [:ul
       (for [contact (sort-by :last contacts)]
         (contact-widget {:contact contact} event-ch))]]))
#+END_SRC

When we call any widget (they're just functions!), we can then pass
the first parameter as a map of *atoms*, ={:!contacts (atom
test-contacts)}=, to have Clidget update the contacts list every time
the atom changes. (Note the '!' in the keyword).

Also, the body of =contact-list-widget= doesn't care whether it was
passed an atom or a value - all it sees is an immutable value.

The remaining parameters to =contact-list-widget= are yours to pass as
you see fit - here I'm passing a core.async channel for
event-handling purposes.

We pass the individual contact value through to the =contact-widget=,
but without an '!' - this is a *value*.

*** Rendering an individual contact

Rendering an individual contact is similar: we accept a contact, and
an event channel, and return an HTML =<li>= element with the contact's
(formatted) name.

We also render a delete button and, when the delete button is
pressed, we put an event on the channel:

#+BEGIN_SRC clojure
  (defwidget contact-widget [{:keys [contact]} event-ch]
    (node
     [:li
      [:span (f/display-name contact)]
  
      (doto (node [:button "[delete]"])
        (d/listen! :click #(a/put! event-ch {:type :delete
                                             :contact contact})))]))
#+END_SRC

*** Rendering the 'new contact' input

This rendering of the 'new contact' input doesn't depend on any of the
system state, so we don't need to declare this as a
=defwidget=. Instead, we can use an ordinary =defn=:

#+BEGIN_SRC clojure
  (defn new-contact-box [event-ch]
    (let [name-input (node [:input
                            {:type "text"
                             :placeholder "New Contact"
                             :autofocus true}])]
      (doto name-input
        (d/listen! :keyup
            (fn [e]
              (when (= kc/ENTER (.-keyCode e))
                (a/put! event-ch {:type :create
                                  :name (d/value name-input)})
                (d/set-value! name-input nil)))))))
#+END_SRC

*** Handling events

#+BEGIN_QUOTE
/If a process sends an event and no one is around to hear it, does it
make a sound?/
#+END_QUOTE

That aside, we should probably handle the generated events!

We do this completely outside of Clidget - Clidget doesn't force any
opinions on you as to how to do event handling!

To handle the events, we can implement a function that accepts the
channel and the state atom, listens to the channel, and updates the
state accordingly:

#+BEGIN_SRC clojure
  (defn handle-events! [event-ch !contacts]
    (go-loop []
      (when-let [{:keys [type] :as event} (a/<! event-ch)]
        (case type
          :create
          (swap! !contacts conj (f/parse-contact (:name event)))
  
          :delete
          (swap! !contacts disj (:contact event)))

        (recur))))
#+END_SRC

If we had more than two events here or the events were more complex,
I'd be tempted by a multi-method, but for now, a =case= will suffice!

*** Putting it all together

To render this in the browser, we add the following to the =onload=
handler:

#+BEGIN_SRC clojure
  (set! (.-onload js/window)
        (fn []
          (let [!contacts (atom test-contacts)
                event-ch (doto (a/chan)
                           (handle-events! !contacts))]
  
            (d/replace-contents! (.-body js/document)
                                 (node
                                  [:div
                                   (contact-list-widget {:!contacts !contacts} event-ch)
                                   (new-contact-box event-ch)])))))
#+END_SRC

Here we're setting up the system state (initialising =!contacts= to
=(atom test-contacts)=), setting up the event channel, and adding the
=contact-list-widget= to the document body (remember, it's just a
function). 

** And we're done!

Here's the completed application, for reference:

#+BEGIN_SRC clojure
  (ns contacts.cljs.app
    (:require [clidget.widget :refer [defwidget] :include-macros true]
              [cljs.core.async :as a]
              [contacts.cljx.formatter :as f]
              [dommy.core :as d]
              [goog.events.KeyCodes :as kc])
    (:require-macros [dommy.macros :refer [node sel1]]
                     [cljs.core.async.macros :refer [go-loop]]))
  
  (enable-console-print!)
  
  (defwidget contact-widget [{:keys [contact]} event-ch]
    (node
     [:li
      [:span (f/display-name contact)]
      (doto (node [:button "[delete]"])
        (d/listen! :click #(a/put! event-ch {:type :delete
                                             :contact contact})))]))
  
  (defwidget contact-list-widget [{:keys [contacts]} event-ch]
    (node
     [:div
      [:h1 "Contact List:"]
      [:ul
       (for [contact (sort-by :last contacts)]
         (contact-widget {:contact contact} event-ch))]]))
  
  (defn new-contact-box [event-ch]
    (let [name-input (node [:input
                            {:type "text"
                             :placeholder "New Contact"
                             :autofocus true}])]
      (doto name-input
        (d/listen! :keyup
            (fn [e]
              (when (= kc/ENTER (.-keyCode e))
                (a/put! event-ch {:type :create
                                  :name (d/value name-input)})
                (d/set-value! name-input nil)))))))
  
  (defn handle-events! [event-ch !contacts]
    (go-loop []
      (when-let [{:keys [type] :as event} (a/<! event-ch)]
        (case type
          :create
          (swap! !contacts conj (f/parse-contact (:name event)))
  
          :delete
          (swap! !contacts disj (:contact event)))
        (recur))))
  
  (def test-contacts
    #{{:first "Ben" :last "Bitdiddle" :email "benb@mit.edu"}
      {:first "Alyssa" :middle-initial "P" :last "Hacker" :email "aphacker@mit.edu"}
      {:first "Eva" :middle "Lu" :last "Ator" :email "eval@mit.edu"}
      {:first "Louis" :last "Reasoner" :email "prolog@mit.edu"}
      {:first "Cy" :middle-initial "D" :last "Effect" :email "bugs@mit.edu"}
      {:first "Lem" :middle-initial "E" :last "Tweakit" :email "morebugs@mit.edu"}})
  
  (set! (.-onload js/window)
        (fn []
          (let [!contacts (atom test-contacts)
                event-ch (doto (a/chan)
                           (handle-events! !contacts))]
            (d/replace-contents! (.-body js/document)
                                 (node
                                  [:div
                                   (contact-list-widget {:!contacts !contacts} event-ch)
                                   (new-contact-box event-ch)])))))
#+END_SRC

A slightly-styled version is available in this repository - feel free
to clone it and try it for yourself. You can start it by going to the
/contacts/ directory, and running =lein dev=.

** Any feedback/questions?

I'm happy to take any feedback or questions, either through here, on
the mailing list, or through Twitter at [[https://twitter.com/jarohen][@jarohen]].

Thanks!

*James*
